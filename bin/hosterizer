#!/usr/bin/env ruby

require 'rubygems'
require 'net/ssh'
require 'net/ssh/gateway'
require 'optparse'
require 'pp'

module HosterizerApp

  def self.options
    @options ||= {
      :verbose => 0,
      :user    => ENV['USER']
    }
  end

  def self.logger
    @logger ||= Logger.new( $stdout )
  end

  # Parse all the cmdline options.
  def self.parse_options( args )
    # Parse the options on the cmdline
    OptionParser.new( args ) do |opts|
      opts.banner = <<-EOS
Scan hosts for applications and create an image describing their configuration.

Usage:
	hosterizer [options] <hosts>

Options:
EOS

      opts.on '-v', '--verbose', 'Output more runtime information.' do |v|
        options[:verbose] ||= 0
        options[:verbose] += 1
      end

      opts.on '-l', '--list-applications-only',
        'Only list the applications on each host.' do |l|
        options[:list_apps] = true
      end

    end.parse!

    # Setup our logger
    log_level = case options[:verbose]
      when 0 then Logger::WARN
      when 1 then Logger::INFO
      else Logger::DEBUG
    end
    logger.level = log_level
  end

  # Load the modules that define the types applications we can detect.
  def self.load_application_types
    # Require all the modules in lib/hosterizer/application_type/**.rb
    $: << 'lib'

    require 'hosterizer/application_type'

    application_type_glob = File.join( 'lib', 'hosterizer', 'application_type', '**.rb' )
    application_type_modules = Dir.glob( application_type_glob )
    if application_type_modules.empty?
      raise "No application_types modules found, searching: #{application_type_glob}"
    end
    application_type_modules.each do |type_file|
      logger.debug( "requiring file #{type_file}" )
      require type_file.sub( /\.rb$/, '' )
    end
  end

  def self.split_user_and_host( host )
    user_and_host = host.match( /(.*)(?:@(.*))?/ )

    [ user_and_host[2], user_and_host[1] ]
  end

  # Connect to the given host.
  #
  # The hostname can have encoded in it a gateway host and/or a username to
  # use to connect with. The syntax for the hosts is:
  #
  #   [[gateway_user@]gateway/][user@]host
  #
  # This method will decode this, connect as required using the gateway and
  # user, if necessary, and then call the block provided.
  def self.connect_to_host( host, &block )
    hosts = host.match( Regexp.new( '(.*)/(.*)' ) )
    if hosts
      user_and_gateway = hosts[1].match( /(?:(.*)@)?(.*)/ )
      gateway_user = user_and_gateway[1] || options[:user]
      gateway_hostname = user_and_gateway[2]
      logger.debug( "connecting to gateway '#{gateway_hostname}' as '#{gateway_user}'" )
      gateway = Net::SSH::Gateway.new( gateway_hostname, gateway_user )

      user_and_host = hosts[2].match( /(?:(.*)@)?(.*)/ )
      host_user = user_and_host[1] || options[:user]
      hostname  = user_and_host[2]
      logger.debug( "connecting to host '#{hostname}' as '#{host_user}'" )
      gateway.ssh( hostname, host_user, &block )
    else
      user_and_host = host.match( /(?:(.*)@)?(.*)/ )
      host_user = user_and_host[1] || options[:user]
      hostname  = user_and_host[2]
      logger.debug( "connecting to host '#{hostname}' as '#{host_user}'" )
      Net::SSH.start( hostname, host_user, &block )
    end
  end

  def self.main( args )
    parse_options( args )
    load_application_types

    # A hash of the hosts and their applications
    hosts = {}

    # Start to process all the hosts given us on the cmdline
    host_strings = ARGV
    host_strings.each do |host_string|
      logger.info "checking host #{host_string}"

      # Make a connection using our connection strategy.
      connect_to_host host_string do |connection|
        logger.info "connected to host #{host_string}"

        Hosterizer::ApplicationType.types.each do |type|
          logger.debug "checking application configuration #{type.to_s}"

          # Get a list of applications of this type for this host.
          hosts[host_string] ||= {}
          hosts[host_string].merge! type.find_applications( connection, host_string )
        end

      end
    end

    pp hosts
  end
end

if $0 == __FILE__
  HosterizerApp.main( ARGV )
end

